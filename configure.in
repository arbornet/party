dnl Process this file with autoconf to produce a configure script.

dnl =================== PRIVATE MACRO DEFINITIONS =======================

dnl -- PARTY_FUNC_FCNTL_LOCKING()
dnl  - Check if the fcntl() function can be used for locking.  Execute the
dnl  - appropriate set of commands.  Cache value party_cv_func_fcntl_locking
dnl  - is set to "yes" or "no" if we actually did the test, but not if we
dnl  - guessed a value while cross compiling.

AC_DEFUN(PARTY_FUNC_FCNTL_LOCKING,
[ AC_MSG_CHECKING([whether fcntl locking seems to work])
  AC_CACHE_VAL(party_cv_func_fcntl_locking,
  dnl -- Some versions of unix have fcntl.h, fcntl(), F_SETLKW, and F_RDLCK,
  dnl  - but can't do fcntl locking - the calls always fail.  So we have to
  dnl  - run the fool thing to check it.  We do trust the return code though.
  dnl  - We do the test lock on "party.h" because we know that file
  dnl  - exists.  We do a read lock because that is less likely to be messed
  dnl  - up by wierd permissions on the file.
  [ AC_TRY_RUN([
#include <fcntl.h>
#include <sys/file.h>
main () {
int fd; struct flock lk;
if ((fd= open("party.h",O_RDONLY)) < 0) exit(1);
lk.l_type= F_RDLCK; lk.l_whence= 0; lk.l_start= 0L; lk.l_len= 0L;
exit (fcntl(fd,F_SETLKW,&lk)); }
],
    [ party_cv_func_fcntl_locking=yes],
    [ party_cv_func_fcntl_locking=no],
    [ AC_MSG_RESULT("guessing no")])
  ])
  if test ${party_cv_func_fcntl_locking+set} = set; then
    AC_MSG_RESULT($party_cv_func_fcntl_locking)
  fi
])

dnl ========================= INITIALIZATION ==============================

AC_INIT(party.c)
AC_CONFIG_HEADER(config.h)

dnl -- some extra stuff to import into Makefile
AC_SUBST(suid)
AC_SUBST(sgid)

dnl ============================== OPTIONS ================================

sgid=
suid=
AC_ARG_WITH(suid, [  --with-suid=<user>      user to run suid as [party]],[
    suid=$withval])
AC_ARG_WITH(sgid, [  --with-sgid=<group>     group to run sgid as []],[
    sgid=$withval])
if test -z "$sgid" -o "$sgid" = 'no'; then
  if test -z "$suid" -o "$suid" = 'yes'; then
    suid=party
  fi
  AC_DEFINE(SUID)
  sgid=
else
  if test "$sgid" = 'yes'; then
    sgid=party
  fi
  if test ! -z "$suid" -a "$suid" != 'no'; then
    AC_MSG_ERROR([Cannot set both --suid and --sgid flags.])
  fi
  AC_DEFINE(SGID)
  suid=
fi

AC_ARG_ENABLE(close,
    [  --disable-close         disable closed channels [enabled]],[
    close=$enableval ], [close=yes])
if test $close = 'no'; then
  AC_DEFINE(NOCLOSE)
fi

AC_ARG_ENABLE(ignore,
    [  --disable-ignore        disable ignoring users [enabled]],[
    ignore=$enableval ], [ignore=yes])
if test $ignore = 'no'; then
  AC_DEFINE(NOIGNORE)
fi
  
dnl ============================= PROGRAMS ================================

AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S

dnl ============================ LIBRARIES ===============================

AC_SEARCH_LIBS(tgetent, termcap)

dnl =========================== HEADER FILES =============================

AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_CHECK_HEADERS(fcntl.h paths.h sys/file.h sys/ioctl.h sys/time.h unistd.h)

AC_CHECK_HEADERS(termios.h termio.h sgtty.h, [break])

dnl ========== TYPEDEFS, STRUCTURES, AND COMPILER CHARACTERISTICS ========

AC_TYPE_OFF_T
AC_TYPE_UID_T
AC_TYPE_SIGNAL
AC_STRUCT_TM

dnl ============================= FUNCTIONS ==============================

AC_PROG_GCC_TRADITIONAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(select strstr strchr random dup2 setreuid setregid siglongjmp)

dnl ============================ FILE LOCKING =============================

dnl -- check if fcntl exists and works

party_lock=none;

if test $ac_cv_header_fcntl_h = yes; then
  PARTY_FUNC_FCNTL_LOCKING()
  party_ok=${party_cv_func_fcntl_locking-no}
else
  party_ok=no
fi
if test "$party_ok" = yes; then
  AC_DEFINE(LOCK_FCNTL)
  party_lock=fcntl
fi

dnl -- check if flock exists

if test $party_lock = none; then
  AC_CHECK_FUNC(flock,
  [ AC_DEFINE(LOCK_FLOCK)
    party_lock=flock
  ])
fi

dnl -- check if lockf exists

if test $party_lock = none; then
  AC_CHECK_FUNC(lockf,
  [ AC_DEFINE(LOCK_LOCKF)
    AC_CHECK_HEADERS(sys/lockf.h)
    party_lock=lockf
  ])
fi

dnl -- check if locking() exists - personally, I haven't see it since Sys III.

if test $party_lock = none; then
  AC_CHECK_FUNC(locking,
  [ AC_DEFINE(LOCK_LOCKING)
    AC_CHECK_HEADERS(sys/locking.h)
    party_lock=locking
  ])
fi

dnl -- if all else fails, file locking always works

if test $party_lock = none; then
  AC_DEFINE(LOCK_NONE)
fi

dnl ================================== PATHS ===============================

test "x$prefix" = xNONE && prefix=$ac_default_prefix
pt=`eval echo "${sysconfdir}/party/partytab" | sed "s/\/\//\//g"`
echo "Configuration file will be in $pt"
AC_DEFINE_UNQUOTED(PARTYTAB,"$pt")
ct=`eval echo "${sysconfdir}/party/chantab" | sed "s/\/\//\//g"`
AC_DEFINE_UNQUOTED(DFLT_CHANTAB,"$ct")
nt=`eval echo "${sysconfdir}/party/noisetab" | sed "s/\/\//\//g"`
AC_DEFINE_UNQUOTED(DFLT_MAKENOISE,"$nt")
ph=`eval echo "${sysconfdir}/party/partyhlp" | sed "s/\/\//\//g"`
AC_DEFINE_UNQUOTED(DFLT_HELP,"$ph")
ld=`eval echo "${localstatedir}/party/log" | sed "s/\/\//\//g"`
AC_DEFINE_UNQUOTED(DFLT_DIR,"$ld")
pp=`eval echo "${localstatedir}/party/partytmp" | sed "s/\/\//\//g"`
AC_DEFINE_UNQUOTED(DFLT_WHOFILE,"$pp")

dnl -- path of directory where new mail is stored

AC_ARG_WITH(maildir, [  --with-maildir=DIR      directory where spool mailboxes are located],
    [party_cv_maildir=$withval],
    [AC_CACHE_CHECK(where new mail is stored, party_cv_maildir,
	    [party_cv_maildir=no
	    if test -d /var/mail; then
		party_cv_maildir=/var/mail
	    elif test -d /var/spool/mail; then
		party_cv_maildir=/var/spool/mail
	    elif test -d /usr/spool/mail; then
		party_cv_maildir=/usr/spool/mail
	    elif test -d /usr/mail; then
		party_cv_maildir=/usr/mail
	    fi])
     ])

if test $party_cv_maildir != no; then
  AC_DEFINE_UNQUOTED(DFLT_MAILDIR, "$party_cv_maildir")
fi

dnl ======================== GENERATE OUTPUT FILES =========================

AC_OUTPUT(Makefile)
